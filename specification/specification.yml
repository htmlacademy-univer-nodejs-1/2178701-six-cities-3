openapi: 3.0.2
info:
  title: API для проекта «Шесть городов».
  description: |-
    * Список ресурсов и маршрутов сервера «Шесть городов».
  license:
    name: MIT
    url: https://opensource.org/licenses/MIT
  version: 1.0.0

tags:
  - name: offers
    description: Действия с объявлениями.
  - name: users
    description: Действия с пользователем.
  - name: comments
    description: Действия с комментариями.

paths:
  
  /offers:
    get:
      tags:
        - offers
      summary: Получение списка предложений
      description: Список предложений
      responses:
        "200":
          description: Список предложений
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/offer"
        "500":
          description: Внутренняя ошибка сервера

    post:
      tags:
        - offers
      summary: Создание предложения
      description: Создает предложение
      security:
        - bearerAuth: []
      requestBody:
        description: Информация для создания нового предложения.
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/createOffer"
        required: true

      responses:
        "201":
          description: Предложение об аренде создано. Объект предложения.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/fullOffer"
        "400":
          description: Неправильный запрос
        "401":
          description: Пользователь не авторизован
        "500":
          description: Внутренняя ошибка сервера

  /offers/{offerId}:
    get:
      tags:
        - offers
      summary: Детальная информация по предложению
      description: Возвращает детальную информацию по предложению
      parameters:
        - name: offerId
          in: path
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Детальная информация по предложению
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/fullOffer"
        "400":
          description: Неправильный запрос
        "404":
          description: Оффер не найден
        "500":
          description: Внутренняя ошибка сервера

    patch:
      tags:
        - offers
      summary: Редактирование предложения
      description: Редактирует предложение
      parameters:
        - name: offerId
          in: path
          required: true
          schema:
            type: string
      requestBody:
        description: Информация для редактирования предложения
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/fullOffer"
        required: true

      responses:
        "200":
          description: Предложение отредактировано. Объект предложения
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/fullOffer"
        "400":
          description: Неправильный запрос
        "401":
          description: Пользователь не авторизован
        "403":
          description: Доступ запрещен
        "500":
          description: Внутренняя ошибка сервера

    delete:
      tags:
        - offers
      summary: Удаление предложения
      description: Осуществляет удаление предложения
      parameters:
        - name: offerId
          in: path
          required: true
          schema:
            type: string
      responses:
        "204":
          description: ОК
        "400":
          description: Неправильный запрос
        "401":
          description: Пользователь не авторизован
        "403":
          description: Доступ запрещен
        "500":
          description: Внутренняя ошибка сервера

  /premium?city={city}:
    get:
      tags:
        - offers
      summary: Премиальные предложения для города
      description: Возвращает премиальные предложения для города
      parameters:
        - name: city
          in: query
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Премиальные предложения для города
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/offer"    
        "400":
          description: Неправильный запрос
        "500":
          description: Внутренняя ошибка сервера
  
  /favorite:
    get:
      tags:
        - offers
      summary: Список избранных предложений
      description: Возвращает список избранных предложений
      security:
        - bearerAuth: []
      responses:
        "200":
          description: Избранные предложения
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/offer"    
        "401":
          description: Пользователь не авторизован
        "500":
          description: Внутренняя ошибка сервера

  /favorite/{offerId}/{status}:
    post:
      tags:
        - offers
      summary: Добавление/удаление предложения в избранное/из избранного
      description: Добавляет/удаляет в список/из списка избранных предложение
      parameters:
        - name: offerId
          in: path
          required: true
          schema:
            type: string
        - name: status
          in: path
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Предложение добавлено/удалено в избранное/из избранного. Объект предложения
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/fullOffer"    
        "400":
          description: Неправильный запрос
        "401":
          description: Пользователь не авторизован
        "500":
          description: Внутренняя ошибка сервера

  /comments/{offerId}:
    get:
      tags:
        - comments
      summary: Список комментариев для предложения
      description: Возвращает список комментариев для предложения
      parameters:
        - name: offerId
          in: path
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Комментарии для предложения
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/comment"    
        "400":
          description: Неправильный запрос
        "500":
          description: Внутренняя ошибка сервера
    
    post:
      tags:
        - comments
      summary: Добавление комментария
      description: Добавляет в список комментариев для предложения
      parameters:
        - name: offerId
          in: path
          required: true
          schema:
            type: string

      requestBody:
        description: Информация для добавления комментария для предложения
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/createComment"
        required: true

      responses:
        "201":
          description: Комментарий добавлен в избранное. Объект комментария.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/comment"    
        "400":
          description: Неправильный запрос
        "401":
          description: Пользователь не авторизован
        "500":
          description: Внутренняя ошибка сервера

  /register:
    post:
      tags:
        - users
      summary: Регистрация пользователя
      description: Регистрирует нового пользователя
      requestBody:
        description: Информация для создания нового пользователя
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/createUser"
        required: true
      responses:
        "201":
          description: Пользователь зарегистрирован. Объект пользователя
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/user"
                  - properties:
                      id:
                        type: string
                        example: "661bef9f1bdfe1195539b653"
        "400":
          description: Неправильный запрос
        "409":
          description: Пользователь с таким email уже существует
        "500":
          description: Внутренняя ошибка сервера

  /login:
    post:
      tags:
        - users
      summary: Авторизация пользователя
      description: Авторизует пользователя
      requestBody:
        description: Информация для авторизации пользователя
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/loginUser"
        required: true
      responses:
        "200":
          description: Пользователь авторизован. Объект пользователя
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/user"
                  - properties:
                      token:
                        type: string
        "400":
          description: Неправильный запрос
        "500":
          description: Внутренняя ошибка сервера

    get:
      tags:
        - users
      summary: Проверка состояния пользователя
      description: Возвращает информацию по авторизованному пользователю
      parameters:
        - in: header
          name: Authorization
          schema:
            type: string
            pattern: ^Bearer\s
      responses:
        "200":
          description: Пользователь авторизован. Объект пользователя.
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/user"
                  - properties:
                      token:
                        type: string
        "400":
          description: Неправильный запрос
        "401":
          description: Пользователь не авторизован
        "500":
          description: Внутренняя ошибка сервера
  
  /{userId}/avatar:
    post:
      tags:
        - users
      summary: Загрузить изображение аватара
      description: Загружает изображение аватара пользователя. Изображение
        аватара должно быть в формате `png` или `jpg`.
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: string
      requestBody:
        description: Аватар пользователя.
        content:
          multipart/form-data:
            schema:
              required:
                - avatar
              properties:
                avatarUrl:
                  type: string
                  example: photo.jpg
      responses:
        "201":
          description: OK
        "400":
          description: Неправильный запрос
        "404":
          description: Пользователь не найден
        "500":
          description: Внутренняя ошибка сервера

  /logout:
    delete:
      tags:
        - users
      summary: Завершение сеанса
      description: Осуществляет завершение пользовательского сеанса
      security:
        - bearerAuth: []
      requestBody:
        description: Токен для завершения сеанса пользователя.
        content:
          application/json:
            schema:
              properties:
                token:
                  type: string
        required: true
      responses:
        "204":
          description: ОК
        "400":
          description: Неверный токен
        "500":
          description: Внутренняя ошибка сервера

components:

  schemas:

    userType:
      type: string
      enum:
        - regular
        - pro
      example: pro

    city:
      type: string
      enum:
        - Paris
        - Cologne
        - Brussels
        - Amsterdam
        - Hamburg
        - Dusseldorf
      example: Paris

    houseType:
      type: string
      enum:
        - apartment
        - house
        - room
        - hotel
      example: apartment

    facilities:
      type: string
      enum:
        - Breakfast
        - Air conditioning
        - Laptop friendly workspace
        - Baby seat
        - Washer
        - Towels
        - Fridge
      example: Breakfast

    coordinates:
      type: string
      enum:
        - 'latitude: 48.85661, longitude: 2.351499'
        - 'latitude: 50.938361, longitude: 6.959974'
        - 'latitude: 50.846557, longitude: 4.351697'
        - 'latitude: 52.370216, longitude: 4.895168'
        - 'latitude: 53.550341, longitude: 10.000654'
        - 'latitude: 51.225402, longitude: 6.776314'
      example: 'latitude: 52.370216, longitude: 4.895168'

    offer:
      type: object
      required:
        - id
        - price
        - title
        - houseType
        - isFavorite
        - postDate
        - city
        - previewPhoto
        - isPremium
        - rating
        - numberComments

      properties:
        id:
          type: string
          example: 6662e498cc90ecad29ce93b7

        price:
          type: number
          example: 700

        title:
          type: string
          example: Уютная квартира

        houseType:
          $ref: "#/components/schemas/houseType"

        isFavorite:
          type: boolean
          example: true

        postDate:
          type: string
          example: 2024-02-19T08:45:40.283Z

        city:
          $ref: "#/components/schemas/city"

        previewPhoto:
          type: string
          example: prev-photo-d.jpg

        isPremium:
          type: boolean
          example: false
  
        rating:
          type: number
          example: 5

        numberComments:
          type: number
          example: 2

    fullOffer:
      type: object

      required:
        - id
        - title
        - description
        - postDate
        - city
        - previewPhoto
        - photos
        - isPremium
        - isFavorite
        - rating
        - type
        - roomCount
        - guestsCount
        - price
        - facilities
        - authorId
        - numberComments
        - coordinates

      properties:
        id:
          type: string
          example: 6662e498cc90ecad29ce93b7

        title:
          type: string
          example: Уютная квартира

        description:
          type: string
          example: Просторная квартира с балконом

        postDate:
          type: string
          example: 2024-02-19T08:45:40.283Z

        city:
          $ref: "#/components/schemas/city"

        previewPhoto:
          type: string
          example: prev-photo-d.jpg

        photos:
          type: array
          items:
            type: string
          example: [photo-1.jpg, photo-2.jpg]

        isPremium:
          type: boolean
          example: false

        isFavorite:
          type: boolean
          example: true

        rating:
          type: number
          example: 5

        type:
          $ref: "#/components/schemas/houseType"

        roomCount:
          type: number
          example: 3

        guestsCount:
          type: number
          example: 2
        
        price:
          type: number
          example: 7000

        facilities:
          type: array
          items:
            $ref: "#/components/schemas/facilities"

        authorId:
          type: string
          example: 661bef9f1bdfe1195539b653

        numberComments:
          type: number
          example: 2

        coordinates:
          type: string
          items:
            $ref: "#/components/schemas/coordinates"

    createOffer:
      type: object

      required:
        - title
        - description
        - postDate
        - city
        - previewPhoto
        - photos
        - isPremium
        - isFavorite
        - rating
        - type
        - roomCount
        - guestsCount
        - price
        - facilities
        - authorId
        - coordinates

      properties:
        title:
          type: string
          example: Уютная квартира

        description:
          type: string
          example: Просторная квартира с балконом

        postDate:
          type: string
          example: 2024-02-19T08:45:40.283Z

        city:
          $ref: "#/components/schemas/city"

        previewPhoto:
          type: string
          example: prev-photo-d.jpg

        photos:
          type: array
          items:
            type: string
          example: [photo-1.jpg, photo-2.jpg]

        isPremium:
          type: boolean
          example: false

        isFavorite:
          type: boolean
          example: true

        rating:
          type: number
          example: 5

        type:
          $ref: "#/components/schemas/houseType"

        roomCount:
          type: number
          example: 3

        guestsCount:
          type: number
          example: 2
        
        price:
          type: number
          example: 7000

        facilities:
          type: array
          items:
            $ref: "#/components/schemas/facilities"

        authorId:
          type: string
          example: 661bef9f1bdfe1195539b653


        coordinates:
          type: string
          items:
            $ref: "#/components/schemas/coordinates"

    user:
      type: object
      required:
        - name
        - email
        - avatarPath
        - type
      properties:
        name:
          type: string
          example: Keks
        email:
          type: string
          example: keks@keks.ru
        avatarPath:
          type: string
          example: http://localhost:5000/static/keks.jpg
        type:
          $ref: "#/components/schemas/userType"

    loginUser:
      type: object
      required:
        - email
        - password
      properties:
        email:
          type: string
          example: keks@keks.ru
        password:
          type: string
          example: password
      
    createUser:
      type: object
      required:
        - name
        - email
        - type
        - password
      properties:
        name:
          type: string
          example: Keks
        email:
          type: string
          example: keks@keks.ru
        type:
          $ref: "#/components/schemas/userType"
        password:
          type: string
          example: password
    
    comment:
      type: object

      required:
        - id
        - text
        - postDate
        - rating
        - authorId

      properties:
        id: 
          type: string
          example: tyefgbhwej1223dj21e2fwea

        text:
          type: string
          example: "Good"

        postDate:
          type: string
          example: 2024-03-06T20:15:42.792Z

        rating:
          type: number
          example: 2

        authorId:
          type: string
          example: 661bef9f1bdfe1195539b653

    createComment:
      type: object

      required:
        - text
        - rating
        - postDate
        - authorId
      
      properties:
        text:
          type: string
          example: "Good"

        rating:
          type: number
          example: 4

        authorId:
          type: string
          example: 661bef9f1bdfe1195539b653

  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT